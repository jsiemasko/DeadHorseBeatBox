// 
// 
// 

#include "Display.h"

Display::Display() { }

Display::~Display(){ }

void Display::ShowTrackLines(ULONG pulse, USHORT numOfTracks, USHORT selectedTrack){
	if (pulse % DISPLAY_REFRESH_FRAMES == 0){
		USHORT trackOffset = (selectedTrack / numOfTracks) * numOfTracks;
		const USHORT yOffset = 5;
		const USHORT xOffset = 10;
		const USHORT boxHeight = ((DISPLAY_HEIGHT - yOffset) / numOfTracks);
		const USHORT boxWidth = ((DISPLAY_WIDTH - xOffset) / STEPS_PER_PATTERN);

		oled_.clearBuffer();
		oled_.setFont(u8g2_font_unifont_t_symbols);
		oled_.setFont(u8g2_font_pressstart2p_8f);
		oled_.setFontPosCenter();
		oled_.setCursor(0, 60);
		oled_.print("TRK:");
		oled_.setCursor(30, 60);
		oled_.print(selectedTrack + 1);
		oled_.setCursor(48, 60);
		oled_.print("BPM:");
		oled_.setCursor(80, 60);
		oled_.print(_pClock->GetTempo());
		for (int row = 0; row < numOfTracks; row++)	{
			USHORT trackNum = (row + trackOffset) % NUM_OF_TRACKS;
			
			//Display selected track cursor
			if (trackNum == selectedTrack) {
				oled_.setFont(u8g2_font_unifont_t_symbols);
				oled_.drawGlyph(2, ((row * boxHeight) + boxHeight / 2) + 1, 0x2192);	/* arrow */
			}

			USHORT rowCursorPosition = _pPattern->GetCursorPosition(trackNum);
			for (int col = 0; col < STEPS_PER_PATTERN; col++) {
				bool stepEnableState = _pPattern->GetEnableState(trackNum, col);
				bool stepTriggerState = _pPattern->GetTriggerState(trackNum, col);
				if (stepTriggerState == false)	{
					;
				} else if (col == rowCursorPosition) {
					oled_.drawFrame((col * boxWidth) + (boxWidth / 2) - 2 + xOffset, (row * boxHeight) + (boxHeight / 2) - 2, 5, 5);
				} else if (stepEnableState == true) {
					oled_.drawBox((col * boxWidth) + (boxWidth / 2) - 2 + xOffset, (row * boxHeight) + (boxHeight / 2) - 2, 5, 5);
				} else {
					oled_.drawBox((col * boxWidth) + (boxWidth / 2) + xOffset, (row * boxHeight) + (boxHeight / 2), 1, 1);
				}
			}
		}
		oled_.sendBuffer();
	}
}

void Display::ShowBigClock(ULONG pulse)
{
	if (pulse % NUM_OF_TRACKS == 0) {
		const USHORT colSize = 38;
		const USHORT rowOffset = 5;
		const USHORT rowHeight = 8;
		const USHORT numOfRows = 8;
		oled_.clearBuffer();
		oled_.setFont(u8g2_font_courB08_tf);
		oled_.setFontPosCenter();
		for (int i = 0; i < NUM_OF_TRACKS; i++) {
			USHORT row = (i / numOfRows) * numOfRows;
			USHORT col = i / numOfRows;
			USHORT y = rowOffset + (rowHeight * (i - row));
			USHORT x = col * colSize;
			oled_.setCursor(0 + x, y);
			oled_.print(i + 1);
			oled_.setCursor(12 + x, y);
			oled_.print(":");
			oled_.setCursor(18 + x, y);
			oled_.print(_pPattern->GetCursorPosition(i) + 1);
		}
		oled_.setFont(u8g2_font_courB24_tf);
		oled_.setCursor(80, 30);
		oled_.print(pulse % PULSE_PER_STEP);
		oled_.sendBuffer();
	}
}

void Display::ShowTrackDisplay(ULONG pulse, USHORT selectedTrack) {
	if (pulse % DISPLAY_REFRESH_FRAMES == 0) {
		USHORT numOfSteps = STEPS_PER_PATTERN;
		const USHORT dieXOffset = 3; //The die images all seem to be offset to the right a little. Adjust for it
		const USHORT charWidth = oled_.getStrWidth("X") + 1;
		const USHORT circleYOffset = 2; //The circles are shorter than the X.  Even them out
		const USHORT dieSixWidth = 9;
		const USHORT dieSixHeight = 9;
		const unsigned char dieSixBits[] = {
			0xff, 0x01, 0x01, 0x01, 0x45, 0x01, 0x01, 0x01, 0x11, 0x01, 0x01, 0x01,
			0x45, 0x01, 0x01, 0x01, 0xff, 0x01 };

		oled_.clearBuffer();
		oled_.setDrawColor(1);

		oled_.setFont(u8g2_font_pressstart2p_8f);
		oled_.setFontPosCenter();
		oled_.setCursor(0, 60);
		oled_.print("TRK:");
		oled_.setCursor(30, 60);
		oled_.print(selectedTrack + 1);
		oled_.setCursor(48, 60);
		oled_.print("BPM:");
		oled_.setCursor(80, 60);
		oled_.print(_pClock->GetTempo());

		oled_.setFont(u8g2_font_unifont_t_symbols);
		oled_.setFontPosTop();
		oled_.setFontMode(0);
		oled_.setBitmapMode(0); //Write background color
		USHORT rowCursorPosition = _pPattern->GetCursorPosition(selectedTrack);
		for (int col = 0; col < numOfSteps; col++) {
			bool stepEnableState = _pPattern->GetEnableState(selectedTrack, col);
			bool stepTriggerState = _pPattern->GetTriggerState(selectedTrack, col);
			USHORT stepTriggerProbability = _pPattern->GetProbability(selectedTrack, col);

			//Highlight the cursor
			(col == rowCursorPosition) ? oled_.setDrawColor(0) : oled_.setDrawColor(1);
			
			oled_.drawXBMP(col * charWidth, 10, dieSixWidth, dieSixHeight, dieSixBits);

			//Draw trigger row
			if (stepTriggerState == false) { //No Trigger
				oled_.drawGlyph(col * charWidth, 0, 0x0078); //X
			}
			else if (stepEnableState == true) {//Enabled
				//Check if we are drawing a box or a die
				if (stepTriggerProbability == 100) {
					oled_.drawGlyph(col * charWidth, circleYOffset, 0x25cf); //Filled cirle
				} else if (stepTriggerProbability <= 19) {
					oled_.drawGlyph((col * charWidth) - dieXOffset, circleYOffset, 0x2680); //Die: One
				} else if (stepTriggerProbability <= 35) {
					oled_.drawGlyph((col * charWidth) - dieXOffset, circleYOffset, 0x2681); //Die: Two
				} else if (stepTriggerProbability <= 51) {
					oled_.drawGlyph((col * charWidth) - dieXOffset, circleYOffset, 0x2682); //Die: Three
				} else if (stepTriggerProbability <= 67) {
					oled_.drawGlyph((col * charWidth) - dieXOffset, circleYOffset, 0x2683); //Die: Four
				} else if (stepTriggerProbability <= 83) {
					oled_.drawGlyph((col * charWidth) - dieXOffset, circleYOffset, 0x2684); //Die: Five
				} else {
					oled_.drawGlyph((col * charWidth) - dieXOffset, circleYOffset, 0x2685); //Die: Six
				}
			}
			else {//Disabled
				oled_.drawGlyph(col * charWidth, circleYOffset, 0x25cb); //Hollow cirle
			}
		}
		oled_.setFontPosBaseline();
		oled_.sendBuffer();
	}
}


void Display::GraphicsSetup() {
	Serial.println("Graphics Setup");
	oled_.begin();
	oled_.setFlipMode(0);
	oled_.enableUTF8Print();			// enable UTF8 support for the Arduino print() function
	oled_.setFontDirection(0);
	oled_.setFontMode(1);			// Activate transparent font mode
	oled_.setDrawColor(2);
}

void Display::SplashHorse(USHORT displayTime){
	oled_.clearBuffer();
	static const unsigned char dedhors_bits[] PROGMEM = {
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x81, 0x07, 0x00, 0x07,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
			0xcf, 0x1f, 0xc0, 0x07, 0x00, 0x03, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x80, 0xff, 0xff, 0x7f, 0xf0, 0x03, 0x80, 0x07, 0x08, 0x1e,
			0x40, 0x00, 0x03, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xf9, 0x03,
			0x80, 0x07, 0xf8, 0x1f, 0xc0, 0x80, 0x07, 0x00, 0x00, 0x00, 0xe0, 0xff,
			0xff, 0xff, 0xff, 0x03, 0x80, 0x0f, 0xb8, 0x1f, 0xe0, 0x80, 0x0f, 0x00,
			0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x01, 0x80, 0x19, 0x18, 0x10,
			0xe0, 0x81, 0x19, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01,
			0x80, 0x39, 0x18, 0x00, 0xf0, 0x81, 0x79, 0x00, 0x00, 0x00, 0xc0, 0xff,
			0xff, 0xff, 0xff, 0x01, 0x80, 0x79, 0x18, 0x00, 0xb0, 0x81, 0x75, 0x00,
			0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x01, 0x80, 0x71, 0x18, 0x00,
			0x38, 0x83, 0xe1, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x1f,
			0x80, 0xe1, 0x18, 0x00, 0x1c, 0x87, 0xe1, 0x01, 0x00, 0x00, 0xfe, 0xff,
			0xff, 0xff, 0xff, 0x3f, 0x80, 0xc1, 0xf9, 0x03, 0x0c, 0x86, 0xc1, 0x01,
			0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x80, 0xc1, 0xf9, 0x07,
			0x0c, 0x8e, 0x81, 0x01, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
			0x80, 0x81, 0x19, 0x00, 0xfe, 0x8f, 0xc1, 0x00, 0x00, 0xe0, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xef, 0x80, 0xc1, 0x19, 0x00, 0xfe, 0x8f, 0x61, 0x00,
			0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x80, 0xc1, 0x19, 0x00,
			0x0e, 0x9c, 0x71, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf,
			0x80, 0x61, 0x18, 0x00, 0x07, 0xb8, 0x71, 0x00, 0x00, 0xfc, 0xff, 0xff,
			0xff, 0xff, 0xff, 0x3f, 0x80, 0x39, 0x18, 0x10, 0x07, 0xb8, 0x19, 0x00,
			0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x80, 0x1d, 0xf8, 0x9f,
			0x07, 0xb8, 0x0f, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f,
			0x80, 0x0d, 0xf8, 0x9f, 0x03, 0xb0, 0x07, 0x00, 0x00, 0xf0, 0xff, 0xff,
			0xff, 0xff, 0xff, 0x7f, 0x80, 0x03, 0x00, 0x00, 0x03, 0xb0, 0x03, 0x00,
			0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
			0xff, 0xff, 0x7f, 0xf7, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x00, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd,
			0x10, 0x31, 0xe0, 0xc0, 0x03, 0xc0, 0x13, 0x3e, 0xe0, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xfa, 0x30, 0x71, 0xf0, 0xc0, 0x07, 0xe0, 0xf3, 0x3f,
			0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xf7, 0x38, 0x71, 0xf8, 0xc3,
			0x0d, 0xf0, 0xf0, 0x3f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
			0x38, 0x70, 0x3c, 0xc3, 0x1c, 0x38, 0x30, 0x20, 0xf0, 0xff, 0xff, 0xff,
			0xff, 0xff, 0xff, 0xff, 0x38, 0x70, 0x0e, 0xc7, 0x38, 0x3e, 0x30, 0x00,
			0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x38, 0x70, 0x0e, 0xce,
			0x70, 0x1e, 0x30, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xef, 0xff, 0xff,
			0xf8, 0x7f, 0x07, 0xde, 0x71, 0x3e, 0x30, 0x00, 0xfe, 0xff, 0xff, 0xff,
			0xff, 0xe7, 0xff, 0xff, 0xf8, 0x7f, 0x03, 0xd8, 0x78, 0x3e, 0x30, 0x00,
			0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xf8, 0x7f, 0x07, 0xdc,
			0x1e, 0x78, 0xf0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff,
			0x38, 0x70, 0x06, 0xde, 0x07, 0xf0, 0xf2, 0x0f, 0xff, 0xff, 0xff, 0xff,
			0xff, 0x83, 0xff, 0xff, 0x38, 0x70, 0x0e, 0xce, 0x0f, 0xc0, 0x33, 0x00,
			0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0x39, 0x70, 0x1c, 0xc7,
			0x1e, 0xc0, 0x33, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xf8, 0xff,
			0x39, 0x70, 0xb8, 0xc3, 0x3e, 0xe0, 0x33, 0x00, 0xff, 0xff, 0xff, 0xff,
			0xff, 0x01, 0xf0, 0xff, 0x39, 0x70, 0xf8, 0xc1, 0x3c, 0xf0, 0x30, 0x00,
			0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xf0, 0xff, 0x39, 0x30, 0xf0, 0xc0,
			0xf9, 0xfc, 0x30, 0x20, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xf0, 0xff,
			0x01, 0x20, 0x60, 0xc0, 0xf0, 0x3e, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff,
			0xff, 0x00, 0xe0, 0xff, 0x01, 0x20, 0x00, 0x80, 0x40, 0x1e, 0xf0, 0x3f,
			0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xe0, 0xff, 0x01, 0x20, 0x00, 0x80,
			0x00, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xc0, 0xff,
			0x01, 0x20, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
			0x7f, 0x00, 0xc0, 0xff, 0x01, 0x20, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0x80, 0xff, 0x03, 0x20, 0x00, 0x80,
			0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x00, 0xc0, 0x7f,
			0x07, 0x20, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
			0x7f, 0x00, 0xc0, 0x3f, 0x07, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xe0, 0xbf, 0x07, 0x00, 0x00, 0x80,
			0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xe0, 0xfd,
			0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
			0xff, 0x00, 0xc0, 0xfd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x3c,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
			0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
			0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
			0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff,
			0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00 };
	oled_.drawXBMP(0, 0, 128, 64, dedhors_bits);
	oled_.setFont(u8g2_font_timB10_tf);
	oled_.setDrawColor(1);
	oled_.drawStr(95, 64, "v0.01");
	oled_.sendBuffer();
	delay(displayTime);
}

void Display::UpdateDisplay(ULONG pulse) {
	if (_displayMode == DM_BIG_CLOCK) {
		ShowBigClock(pulse);
	} else if (_displayMode == DM_TRACK_DISPLAY) {
		ShowTrackDisplay(pulse, _pPattern->GetCurrentTrack());
	} else if (_displayMode == DM_TRACK_LINES_8) {
		ShowTrackLines(pulse, 8, _pPattern->GetCurrentTrack());
	} else if (_displayMode == DM_TRACK_LINES_4) {
		ShowTrackLines(pulse, 4, _pPattern->GetCurrentTrack());
	} else {
		oled_.clear();
	}
}